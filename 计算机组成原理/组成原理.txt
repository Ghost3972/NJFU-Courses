第一章：计算机系统概述（自看）
第二章：运算方法和运算器
运算器负责：算术运算和逻辑运算
要分析运算器的结构
运算器负责数据处理：要先认识数据、再认识运算规则
先认识数值型数据
第二节：定点加减法运算
定点数：小数点位置固定的数（固定在哪儿？）
整数：如1101
纯小数：如 0.1101 表示也是1101
通过类型区分
以整数为例表达两个数：+3   -1  （4位带符号表示）
+3:  0 011
-1:  1 001 相加
等于:1 100 (-4,错误，应该为+2）
一个数带符号转为二进制，得到原码
不能用原码直接表示，而是用补码表示
反码：正数的反码和原码一样
      负数的反码：符号位不变，数值位取反
+3反码：0 011
-1反码：1 110
补码：正数的补码和原码一样
      负数的补码：反码最低位+1
+3补码：0 011
-1补码：1 111 相加
等于：  0 010 （+2的补码，就是+2，正确）
作业：求-113  +98  -128 的三种编码（8位表示）
关于0的问题：以3位表示为例
      -3--------------------------+3
原码：111 110 101 100 000 001 010 011
反码：100 101 110 111 000 001 010 011
补码：101 110 111 000 000 001 010 011（补码没有-0）
      100 101 110 111 000 001 010 011 有一个表示没使用
多出的这个表示可以用来表示？-4或+4 （选-4）

定点数加减法运算规则：
[x+y]补=x补+y补
[x-y]补=x补-y补=x补+(-y)补

溢出的检测：溢出（超出了n位所能表示的范围）
           分为正溢出和负溢出
一正一负两个数相加不会溢出
两个正数相加或两个负数相加 可能产生溢出
如何检测？双符号位检测法（自看）
单符号位法：
例题：4位表示求 4+5（应该9）
0 100
0 101 相加
1 001 （-1，溢出）
推广：
0***+0***=1***（溢出）
1***+1***=0111（溢出）

0***
0*** 相加
1000  最高位进位为1，符号位进位为0 两个进位不一致，溢出

1***
1*** 相加
0***  最高位进位为0，符号位进位为1 两个进位不一致，溢出
结论：最高位和符号位进位一致（未溢出），不一致（溢出）

对于减法规则：[x-y]补=x补-y补=x补+(-y)补
为了实现减法，先要求出-y补
想：由y得到-y补
例如：4位表示 一个数：
y=0 101
y补=0101  

-y=1 101
-y补=1 011

例如：
y=1 011
y补=1 101  0011

-y=0 011
-y补=0 011

-y补=（y补）带符号取反+1

加法器构造：加法器能实现两个n位数相加，并能溢出检测
先构造一个能实现两个一位数的全加器（FA）
先分析两个一位数相加的几种可能(包含进位）
Ai Bi  Ci   Si  C(i+1)
0  0   0    0   0
0  0   1    1   0
0  1   0    1   0
0  1   1    0   1
1  0   0    1   0
1  0   1    0   1
1  1   0    0   1
1  1   1    1   1
     真值表
对上述真值表进行数学总结成两个公式

异或规则：相同为0，不同为1
因为上述两个公式都是用的逻辑运算（与 或 异或）
所以可以用门电路 实现全加器（图2.3 a图）
有了FA，可以构造一个n位的加法器（如4位）
用方框表示一个FA,4位加法器要4个方框
溢出如何检测？采用单符号位法
最高位和符号位进位一致（未溢出），不一致（溢出）
C3 和 C4 是否一致？使用一个异或门
减法如何实现？
-y补=（y补）带符号取反+1
如何实现带符号取反？是否使用非门？
不用非门，因为不可控
使用异或门实现，当异或门的一端为1的时候
                另一端 输入0 输出1
                       输入1 输出0
                效果：对另一端取反
                当异或门的一端为0的时候
                另一端 输入0 输出0
                       输入1 输出1
                效果：另一端不变
作业：用FA设计一个5位的加法器

第三节：定点乘法运算
例题：23*36
例题：设两个无符号数A=1101 B=1011 求A*B
（符号处理：两个符号位作异或）
分析上述手工算法：
1：乘法最终做的是加法（是否采用加法器）
   用：全加器  FA(三个输入，两个输出）
2：部分积加：先移位，再相加
             不能使用加法器实现
            原因1：n位加法器无法实现n位乘法
                   n位乘法的乘积达到2n位
            原因2：移位操作耗时长，导致速度慢


全加器的作用：实现两个一位数相加（Ai+Bi）
要几个FA？这些FA如何排列？

设：A=a4a3a2a1a0
   B=b4b3b2b1b0     求A*B=?


分析上述手工运算过程： 
部分积由ai*bj构成，可以将ai*bj  转为 aibj
                        算术乘 转为 逻辑与

1×1=1  1×0=0  0×1=0  0×0=0  算术
1与1=1  1与0=0  0与1=0  0与0=0  逻辑（用与门实现）

两个5位相乘，为了得到所有的aibj，需要25个与门，就可以一次性得到所有
推广开：m位×n位要  m*n个与门

这些与门的到的aibj送 FA阵列 如何连接？


作业：设计一个3位×3位的无符号乘法阵列

上述解决了不带符号的乘法

带符号的乘法的实现？
符号位的解决：两个符号异或 得到 乘积的符号

数值位的解决：不能直接送乘法阵列

因为：定点有符号数是用补码表示的，不能直接乘
如何解决：补码--原码--相乘--原码--补码
如何实现：补码和原码的互换，使用求补电路
原码补码的规律：正数一样
               负数：自右向左找到第一个1，该1及右边的0保持不变
                                        该1左边的值取反
例如：
原码：1 0101100     
补码：1 1010100

第四节：定点除法运算   

先看手工算法，
设：x=0.1001  y=0.1011 求：x/y



分析上述手工算法：
1：商上1还是0  由被除数（余数） 和 除数 的大小关系
   够减，则商上1   不够减，则商上0
2：每次减除数，相对于前次来说，除数要右移一位

手工算法无法用于机器运算，原因：
我们可以事先比较一下 除数和被除数的大小关系，决定上1/0
机器不能大概比较，要实际运算才能得到大小关系
如何实际运算：相减，结果为负/结果为正
得到恢复余数法

x=0.1001  y=0.1011 求：x/y 采用恢复余数法

补：一个二进制右移一位，得到的值是原值的1/2













比较手工算法和恢复余数算法：恢复余数算法的运算次数多，速度慢
想办法提高速度（减少运算次数），得到不恢复余数法
分析恢复余数法：
恢复：把刚刚减掉的y再加回去 +y
      下一步，-y/2
      把上述两步运算，合为一步：+y/2







对上述过程修改
x=0.1001  y=0.1011

x补：0.1001
y补：0.1011

               -y补：1.0101
 

y/2补：0.01011
               -y/2补：1.10101

y/4：0.001011

-y/4:1.001011

                -y/4补：1.110101


y/8:0.0001011

-y/8:1.0001011

                -y/8补：1.1110101

看上述数据发现，右移是带符号位一起右移的


0.110
1.110
1.010 -y补       0.110 y补
1.1010 -y/2补    0.0110 y/2补
1.11010-y/4补    0.00110y/4补
1.111010-y/8补   0.000110y/8补


分析上述例题：
发现：符号位的进位和商的值一样
      所以，可以用符号位进位当作商

      因为右移是带符号位一起右移的
      所以，符号位的进位可以提前得到的

作业：x=0.110101
      y=0.111  采用不恢复余数法求x/y


CAS：可控加减法单元，4个输入、4个输出



作业：构造一个3位除3位的阵列除法器


第五节：定点运算器的组成（方法）
前三节解决了基本算术运算：+ - * /
定点运算器还要能完成其它种类运算
如何实现多功能运算？
在FA基础上构造（FA能实现Ai+Bi，两个一位数相加）
改进：Ai、Bi不直接送FA，而是经过函数变换，得到Xi和Yi
     将Xi和Yi送FA

函数发生器由4位控制端控制，可以实现16种运算
结合进位是否有效，得到32种运算（16逻辑、16算术）


第六节：浮点运算方法和浮点运算器

先认识浮点数：小数点位置不固定的数
如：0.3695   0.005632   369.21
如：0.0001101    1011.011  10001.011
要表示浮点数，要把 . 固定下来
如：0.005632=0.5632*10（-2）  369.21=0.369921*10(3)
如：0.0001101=+0.1101*2(-11)   1011.011=+0.1011011*2(+100)  
                                       
可以用定点数来表示浮点数，该表示形式具有4要素：

   尾数、 阶、数符、阶符
如： 5位  3位  1位   1位
   1010101110=-0.10101*2（+011）

现实中的浮点数格式：IEEE754标准
32位的格式：（3要素）
尾数M：占23位
阶E：占8位
数符S：占1位

阶符去哪儿了？数的大小改变？
因为浮点运算加法：加之前要先比较阶的大小和对阶(把两个阶弄成一样）
如：0.36*10(2)+0.58*10(3)=0.036*10(3)+0.58*10(3)
如果阶是带符号数，比较大小还要多做一步工作：判断符号位（+  -）
为了加快比较的速度，想办法去符号（没有负数）
去符号方法：拿真值+值 （移码）
例如：4位带符号数范围: 1111--0111  有负数
                      -7    +7
     加上8范围变为     1  ---- 15   没有负数
例如：5位带符号数范围：11111---01111
                       -15---+15
      加上2（4次方）16  1 ---- 31  没有负数

8位的阶带符号范围 11111111---01111111
                   -127      +127   有负数
      加上128       1         255  没有负数 （移码的定义）
      IEEE754标准规定+127，范围变为0----254 （也去符号了）

754标准用阶为255表示 无穷大或无意义数，正常的浮点数的阶不能为255，所以+127来去符号

正常尾数应该是一个纯小数：0.1*****1 
为了提高数据的精度，将尾数变换成1.*****1格式，左边的1是默认的，不予保存
例题：754标准数41360000 （十六进制） 求它的值
      0      10000010   01101100000000000000000
     数符S     阶E       尾数M
S：+
阶=10000010-01111111=00000011=3
尾数=1.011011
所以该浮点数为：+（1.011011）×2（3次方）=+1011.011=11.375

作业：52638000（十六进制）求它的值


一：浮点加减法运算
设x=Mx*2(Ex)  y=My*2(Ey)  求x+y  x-y

步骤：
1：0操作数检查
2：比较阶的大小并对阶
   对阶方法：先求阶差(Ex-Ey)，如阶差>0:Ex>Ey
                                 =0:Ex=Ey  不用对阶
                                 <0:Ex<Ey
   如阶不相等，
要对阶：小阶--大阶 ，阶变大，尾数右移，误差小（采用）
                     
       大阶--小阶 ，阶变小，尾数左移，误差大

3：尾数求和
   
4：规格化
   定点数求和时，会出现溢出
   浮点数尾数求和时，也会出现10.***  或 01.***
                    可以通过移位的方法调整（右移一位，阶+1）

5：舍入处理：右移时要舍入处理，4种方法
6：溢出处理：阶可能会溢出


二：浮点数乘除法运算

设x=Mx*2(Ex)  y=My*2(Ey)  求x*y  x/y

步骤：
1：0检查
2：阶相加/减（判断溢出）
3：尾数相乘/除 
4：结果规格化  
5：舍入处理 
6：确定符号               


主要内容：定点运算器：+-*/
         浮点运算器：

第三章：存储系统
第一节：概述
程序的局部性原理：
在一段时间内，处理的数据包括处理数据的指令在存储器中是相对集中在一起的。
第二节：静态随机存取存储器（SRAM)
存储器存放数据的--存二进制数据--存0和1的
能存一个0或1的对象称为存储元
一：静态存储元













分析：
1：用了8个MOS管（三个引脚，控制端加高电平，其它两端导通；控制端加低电平，其它两端截止）
2：该电路可以存一个1或一个0（一位）
3：以写入一个1为例分析：
X地址线和Y地址线加高电平（X高电平--T5和T6导通；Y高电平--T7和T8导通）
I/O端加高电平（I/O反加低电平）
I/O端的 1 沿着T7、T5 到达A点，此时A（1）
I/O反的 0 沿着T8、T6 到达B点，此时B（0）

A（1）连着T2的控制端---T2导通---B点接地   --B（0）
B（0）连着T1的控制端---T1截止---A点不接地 --A（1）

当A、B点的状态稳定下来后，可以撤销I/0端和I/0反端的值
撤销后A、B点的状态 靠Vdd（5V）维持：
                   Vdd(5V）---T3 T4导通
                   T3导通--A点接电源（维持1）
                   T4导通--B点接电源（因为B点接地的，所以B点为0）
                  此时，AB的状态靠电源维持，从而稳定下来
静态的意思：只要电源不断电，数据就不会丢失


在存储元基础上构造一个字节的存储器(8位），需要8个存储元
8个存储元如何连接：（保证以字节为单位读写，8位要读一起读、8位要写一起写）
8个存储元的X地址线连在一起，Y地址线也连在一起

在字节的基础上构造一个16字节的存储器，方便讲解，用一个方框代表一个字节
cpu读写一个字节先要：将该字节的存储元的T5--T8导通（通过给X线和Y线加高电平实现)
                    不考虑并发操作，每组X线每次只能有一根为高电平，其它都为低电平（如何实现？）
这16个字节有两种排列方式：
第一种：一行一个字节，共16行，如何区分行？通过X线区分，此时Y线只要连在一起加高电平即可。
         要16根X线+1根Y线=17根线
        称为单译码方式
第二种：一行多个字节（如一行4个字节），每行的x线连在一起、每列的y线连在一起
       要4根x线+4根y线=8根线
       称为双译码方式

例题：某存储器1G字节（2的30次方个字节约为：1000*1000*1000=10亿个字节）
如采用单译码方式需要：10亿根x线+1根y线
如采用双译码方式需要：（2的15次方行，2的15次方列）
                      32000根x线+32000根y线=64000根线


第二节：SRAM逻辑结构（分析图3.5）
译码器的作用：将n位的地址，转换成2的n次方根选择线中的一根为高电平，其它都为低电平。
作业：构造一个2：4的译码器  00 x0为1  01  x1线为1    10  x2线为1   11  x3线为1


存储器容量的扩充：用小容量的存储芯片构造大容量的存储器（若干片小容量芯片如何连接？）

1：位扩展：增加字长

例题：用1M*4位的芯片构造1M*8位的存储器
要：2片

需要体现：地址线（A）、数据线（I/0)、控制线（CS、WE、RW、OE..)
数据线分高位、地位
地址线同时连接两个芯片，即这两个芯片对应的字节是同时读/写的
控制线同时连接两个芯片
作业：用1K×4位的芯片，构造1K×8位的存储器

2：字扩展：增加字数（有片选信号了）

例题：用256K×8位芯片构造2048K×8位的存储器
要：8片
需要体现：地址线（A）、数据线（I/0)、控制线（CS、WE、RW、OE..)
数据线：同时连8个芯片，不分高低位
8个芯片每次只能有一片读写（其它7片不工作），如何实现8选1
单个芯片的地址：18位（A0--A17,芯片自己的地址引脚)
存储器的地址  ：21位（A0--A20,cpu发出的）
地址线：21位地址线的前18位（A0--A17)连芯片
       另三位地址（A18、A19、A20 送3：8译码器）
控制线：同时连8个芯片

作业：用1K×8位的芯片构造4K×8位的存储器


3：组合扩展（既要位扩展，又要字扩展）
作业：用1K×4位的芯片，构造2K×8位的存储器

第三节：动态随机存取存储器（DRAM)

一：DRAM的存储元
利用电容存放数据0或1
充电：1   放电：0

以写1为例：（写0类推）
1：行线 加 高电平，MOS管导通
2：Din高电平（1）
3：R/W(反）加低电平，输入缓冲器导通
4：1沿着Din--输入缓冲器--位线--MOS管--电容（充电）

以读1为例：
1：行线 加 高电平，MOS管导通
2：R/W(反）加高电平，输出缓冲器导通
4：1沿着电容--MOS管--位线--输出缓冲器--Dout（1）--CPU（读出1）

读1操作存在问题：
读出操作其实是在对电容放电
导致读出1后，数据会变成0（错误）
如何解决：读出1后，将读走的电荷再补充回去（充电）
给电容补充电荷的操作称为刷新，也就是说：读1以后要刷新
从该点（读1以后要刷新）来说：DRAM比SRAM的读速度要慢。

刷新操作除了在读1后要执行，每隔一段时间都要刷新一次，原因是电容中的电荷会泄漏
二：刷新操作
刷新周期：从电容充满电开始，到0和1的临界点所能维持的时间
必须保证在一个刷新周期内要把所有的存储元全部刷新一遍
而刷新操作时，cpu不能访问内存--读写速度慢
刷新方式：采用双译码方式（分若干行、若干列）
刷新以行为单位（加快刷新速度）
一种集中式刷新：把所有行的刷新操作安排在一个集中的时间段内
               缺点：cpu有较长一段时间访问不到内存
一种分散式刷新：在一个刷新周期内每隔一小段时间，刷新一行
               优点：可以利用空闲时间刷新一行

三.DRAM芯片的逻辑结构
为减少芯片引脚数量，行列地址分时传送
CPU每次发出10位地址，如何判断它是行？还是列地址？
CPU提供行、列选通信号：RAS和CAS决定是行、列地址
2选1开关在：行地址锁存器和刷新计数器之间切换（为什么要这样做？）

刷新计数器计数方式：从0到1023循环计数


只读存储器：自己看（不考）


第五节：并行存储器（提高存储器的速度）

并行：同时进行

一：双端口存储器
早期的机器以cpu为中心，存储器的工作由cpu控制，加重cpu的负担
现在的机器以内存为中心，存储器的工作有自己控制，解放cpu，存储器还可以和其它设备交互数据。
以内存为中心的方式，对存储器的读写能力要求高
双端口：存储器的控制电路（包括地址、数据、控制信号）有两路，理论上可以同时进行两次读写操作（左右端口）
双端口的读写分为：
无冲突的读写：左右端口的地址不一样
有冲突的读写：左右端口的地址相同，且存在写操作时发生
             如何解决冲突：暂时屏蔽一个端口，只有一个端口工作


二：多模块交叉存储器
一个存储器由若干个模块组成，数据的读写（地址组织）有两种方式
顺序访问、交叉访问
例如：某存储器有4个模块，每个模块8个字
顺序访问方式：同一模块内的地址是连续的
交叉访问方式：连续的地址分散在不同的模块内
假设：读写周期为T，总线传送周期为t(t<T)
      要读取0--3 四个连续的字，分别求顺序方式和交叉方式需要多长时间

顺序方式：要 4T=T+3T
交叉方式：理论上只要1T，实际要考虑数据传送冲突，
         所以模块之间要有延时（1个t）
         所以实际耗时：T+3t<T+3T  所以交叉方式速度快

交叉方式对模块数有要求：至少T/t个模块，满足同一个模块下一次启动时，它的上一次操作已经结束
                      满足：T<=mt


作业：习题4，8

第六节：cache存储器（高速缓存）
已知：
SRAM：速度快，造价高（不需要刷新）
DRAM：速度慢，造价低（要刷新）

DRAM适合大容量的内存，SRAM适合小容量的cache

正常情况下，cpu和内存交换数据，
内存的读写速度远慢于cpu的处理速度
解决方法之一：在cpu和内存之间 增加一个小容量的高速度的存储器（SRAM）
该方法基于：程序的局部性原理，可以先将集中在一起的一部分数据提前调入cache
           保证在一段时间内，cpu只访问cache而不用访问内存
待解决问题：
1：如何判断数据是否在cache中？
2：当cache满时，替换谁？
3：当cpu写cache时，如何保证数据的一致性？

cache性能指标：命中率、平均访问时间、访问效率
命中率：一段时间内，cpu访问cache Nc次，访问内存Nm次
       命中率h=Nc/（Nc+Nm），希望h越接近100%越好

平均访问时间：访问cache需要tc，访问内存需要tm
       平均访问时间ta=h*tc+（1-h）*tm
       希望ta越接近tc越好

访问效率：e=tc/ta=tc/(h*tc+(1-h)*tm)=1/(h+(1-h)*r)
         r=tm/tc 表示内存慢于cache的倍数，r值不能太大，以5--10为宜
作业：9,10题

问题一的解决：主存和cache的地址映射
主存分为若干存储单元，每个存储单元的编号称为地址
为了区分主存和cache，称cache的一行就叫行、称主存的一行叫块
                    行和块大小相等，都包含若干个字
cache：行地址
主存： 块地址

假设：主存有256块、cache有8行（每行、块有16个字：列地址4位）
      块地址8位（00000000-----11111111）
                  0 ----------  255

如何判断数据是否在cache中？
主存的某块数据调入cache的同时，将主存的块地址（或块地址的部分）也存在cache中（称为地址映射）
三种映射方法：
1：全相联映射：主存的一块调入cache，可以放在cache的任意行，同时将块地址（8位）放在cache的标记中
如何判断在不在？cpu发出一个行地址，拿该行地址和cache中的标记比较：
                                                没有相等的标记：说明数据不在cache中（未命中），在主存
                                                有标记相等：说明数据在cache中（命中）
需要比较多少次能得到在不在的结论：1--8次
                          标记：8位
全相联映射的缺点：比较次数多、标记的位数多


2：直接映射：主存的一块调入cache，只能放在cache的特定行（哪一行？）
            映射关系：主存的块号 MOD cache的行数
假设：主存有256块、cache有8行（每行、块有16个字：列地址4位）
      第25块放在？行：  25 MOD 8=1  放在第一行
      第76块放在？行：  76 MOD 8=4  放在第四行
直接映射判断是否命中，需要比较？次：1次
                        标记？位：5位（<全映射的8位）
 0块：00000000  
 8块：00001000
16块：00010000
24块：00011000
32块：00100000
40块：00101000
...
上述块地址的低3位都为0，可以不用参加比较，所以标记：8-3=5位
实现简单
缺点：cache的利用率可能低


3：组映射：将cache分为若干组，组内采用全映射、组间采用直接映射

假设：主存有256块、cache有8行（每行、块有16个字：列地址4位）
      把cache分为四组，每组2行
      块和组的映射关系：主存的块号 MOD cache的组数
 0块：0000000
 4块：0000100
 8块：0001000
12块：0001100
16块：0010000
20块：0010100
...

上述块地址的低2位都为00，可以不用参加比较，所以标记8-2=6位 介于8和5之间
上述块调入cache，都是放在cache的第0组，组内任意（全映射）
                                        需要比较1-2次： 介于1--8次和1次之间

采用较多的是每组2行，称为2路组相联映射

作业：主存1024块，cache32行（每块、行64字）
求分别采用全、直接、组 映射方式时，比较次数和标记的位数（组映射，每组4行）



问题二的解决：当cache满时，替换谁？替换策略

策略1：最不经常使用算法
替换一段时间内CPU访问次数最少的行
实现方法：给cache的每行增加一个标记（计数器），每被访问一次，计数器值+1
         替换计数器值最小的行（被访问次数最少）
缺点：新调入cache的行可能很快被替换出去

策略2：近期最少使用算法
实现方法：给cache的每行增加一个标记（计数器），某行被访问一次，该行计数器清零，
         其它行计数器值+1.替换计数器值大的行，实现了保护新行。
对2路组相联映射来说，可以不用计数器，某行被访问，该行清零，另一行置1，替换时替换标记为1的行

策略3：随机替换

问题三的解决：当cpu写cache时，如何保证数据的一致性？写策略

一致：主存和cache的一致性

策略1：写回法
cpu写cache时，不同时写内存。当cache中数据被替换时，把替换出的数据写入主存。
优点：访问cache时不用访问内存，读写速度快
缺点：存在一段时间，cache和内存是不一致的，不适合对实时性要求高的系统

策略2：全写法
cpu写cache的同时，写内存
优点：始终保证一致性
缺点：速度慢

策略3：写一次法
cpu第一次写cache时，写内存（全写法）
其它时候采用写回法

需要给cache设一个行标志（写标志）

作业：

虚拟存储器：

在硬盘上开辟出一块存储空间，把这片存储空间当做内存来使用



第四章：指令系统（为第五章准备）

第一节：概述
第二节：指令格式
一条指令由两个部分组成：
操作码：决定指令做什么操作（运算）
地址码：决定操作数在哪儿？

一：操作码
应该是一个二进制序列（n位）(如何将二进制序列的操作码转换成控制信号？？）
如：n=4  可以实现16种运算0000----1111
二进制序列难以记忆，用助记符表示操作码
例如：ADD表示加  SUB表示减

二：地址码：
分为：0、1,2,3 地址指令

上述两个码合起来的长度就是指令字长度
指令字长度受机器字长影响
多字长指令的执行速度慢（因为要多次访问内存）


第四节：指令和数据的寻址方式

寻址方式：根据地址找到对象的方式
         此处的对象可能是：指令、数据

一：指令寻址方式
1：顺序寻址：按照程序中若干条指令的先后顺序执行指令
实现：在cpu中有一寄存器：PC（程序计数器），专门存放指令在内存中的地址
                       PC寄存器具有+1功能，形成下一条指令的地址

2：跳跃寻址：从当前位置跳到其它地方继续执行指令
实现：通过程序中的跳转指令实现
      修改PC寄存器的地址（值）




二：操作数寻址方式（形成操作数的地址，根据该地址找到操作数）

指令中的操作数可能存在于：内存中 、 寄存器中、     指令中
                要提供：内存地址、 寄存器号（名）

1：隐含寻址
指令不用显式地提供操作数地址，操作数隐含在某寄存器中
2：立即寻址
地址码部分给出的不是地址，而是直接给出操作数，速度快
3：直接寻址
操作数在内存中，指令提供内存地址
4：间接寻址
操作数在内存中，操作数地址在内存中，地址码提供操作数地址在内存中的地址
                                        （地址的地址）
访问两次内存，速度慢
5：寄存器寻址
操作数在寄存器中，指令提供寄存器名
6：寄存器间接寻址
操作数在内存中，操作数地址在某寄存器中，指令地址码提供：寄存器名
访问一次内存，一次寄存器

7：偏移寻址
实际地址=固定值+偏移量
（1）相对寻址：针对PC寄存器来说
（2）基址寻址：cpu中有一种寄存器叫基址寄存器，用来存放基址（固定值）
             指令中的地址码提供相对于固定值的一个偏移量
（3）变址寻址：cpu中有一种寄存器叫变址寄存器，用来存放偏移量
              指令中的地址码提供固定值
     比如要给有100个元素的数组的每个元素做+8操作（假设该数组在内存的起始地址为30）
     如采用基址寻址：30放在基址寄存器，偏移量（0---9）由指令提供（需要100条指令）
     如采用变址寻址：30在指令中，0放在寄存器中（每执行一次，寄存器+1）
                    需要1条指令（执行10次）




8：段寻址是一种基址寻址


作业：复杂指令系统和精简指令系统的区别

复习：关于段寻址

存储器容量：1MB=2（20次方）个字节
该存储器的地址：20位（A0--A19）
段基址寄存器16位，只能存放16位地址，不够20位
把1MB的存储空间分为16段，每段64KB=2（16次方）个字节（段内地址16位）
段基址有哪些值？段的起始地址
第0段的起始地址：00000000000000000000
              00000000000000000000---00001111111111111111  
第1段的起始地址：00010000000000000000
              00010000000000000000---00011111111111111111
第2段的起始地址：00100000000000000000
              00100000000000000000---00101111111111111111
第3段的起始地址：00110000000000000000
              00110000000000000000---00111111111111111111
...
第15段的起始地址：11110000000000000000
              11110000000000000000---11111111111111111111

20位的段地址砍掉第4位（剩16位），放在段基址寄存器中
如：1111000000000000
如何得到实际地址：段基址寄存器左移4位+16位偏移量（段内地址）
例如：段基址为：1101000000000000   16位偏移量为：0010110111001100
实际地址为：11010000000000000000+0010110111001100
           =11010010110111001100
第五章：中央处理器（包含：运算器、寄存器、控制器）
第一节：CPU的功能和组成
一：功能
指令控制：CPU按序执行指令
操作控制：把操作码翻译成控制信号（操作信号）
时间控制：控制操作信号生效的时间先后次序
数据加工：完成算术和逻辑运算

二：CPU的基本组成（认识CPU）
图5.1
分为两个部分：
控制器：
运算器：

三：CPU中的主要寄存器
1：数据缓冲寄存器DR：暂时存放ALU的结果
2：指令寄存器IR:存放从指存取进来的一条指令，包含：操作码和地址码
3：程序计数器PC：存放指令在内存中的地址，具有+1功能
4：数据地址寄存器AR：存放操作数在数存中的地址
5：通用寄存器R0-R3：存放操作数，为ALU提供操作数
6：状态字寄存器PSW：存放运算除运算结果之外的一些运算状态，比如：溢出、为0、正负，进位

四：操作控制器和时序产生器
CPU内各个寄存器、ALU、及内存之间连接总线称为数据通路
数据通路的导通和截止受控制信号控制
在控制信号上要叠加时间信号
重点讲述采用 微程序控制器  实现的方法

第二节：指令周期
一：基本概念
指令周期：从取指令开始，到指令执行完毕所需的时间 
打比方：课程周期  从8:00开始上课  到  9:40  下课

cpu周期：一个指令周期通常由若干个CPU周期组成（又叫机器周期）
打比方：一个课程周期分为两节课，每节课讲述一些特定的内容
每个cpu周期完成一组特定的操作
CPU周期时长的决定：所有操作中耗时最长的那种操作所需的时间
                 所有操作中访问内存耗时最长
                 所以用：从内存读取一条指令、并进行指令译码的时间
                         作为cpu周期的定义。
一个指令周期至少包含2个cpu周期：取指令、执行指令

时钟周期：又叫T周期，一个cpu周期包含若干个时钟周期
打比方：一节课包含45个分钟
一个cpu周期包含4个时钟周期，把操作信号安排在不同的时钟周期内完成，
从而实现了先后次序。

一个由6条指令构成的程序：
  分析指令周期：由几个CPU周期组成？至少包含2个cpu周期
               每个CPU周期完成哪些操作

第一条指令：mov r0,r1 将r1中的值传到r0中
第一个CPU周期：取指令CPU周期（从指存中取出mov指令到CPU中来）
1：程序开始运行，第一条指令的地址装载到pc寄存器中（pc=101）
2：pc（101）经abus（i）（指令地址总线）送指存
   指存启动地址译码、读操作，读出一条指令（mov），送ibus
3：ibus上的指令打入ir寄存器
4：pc+1（pc=102），为下一条指令做准备
5：ir.op码（操作码）送指令译码器，产生控制信号

第二个cpu周期：执行指令
1：控制信号选中r1为源寄存器、选中r0为目的寄存器，r1送alu
2：启动alu做传数操作
3：alu经三态门送dbus（数据总线）
4：dbus上的值送dr
5：dr值（10）送r0寄存器
结束
上述操作只需一个CPU周期
所以mov指令的指令周期包含两个CPU周期（取指令、执行指令）

第二条指令：lad r1,6  取数指令，将数存6号单元的数（100）取进cpu
                     放在r1寄存器中
第一个CPU周期：取指令CPU周期（动作一样）
1：pc（102）经abus（i）送指存
2：ibus上的指令打入ir寄存器
3：pc+1(pc=103)，为下一条指令做准备
4：ir.op码送指令译码器，产生控制信号
结束

第二、三个CPU周期：执行指令（要几个CPU周期？）
1：ir.地址码（6）送dbus
2：dbus（6）送ar
3：数存选中6号单元，读出100，传到dbus上
4：dbus（100）打入dr寄存器
5：dr（100）打入r1寄存器
结束
上述操作要几个CPU周期？是不是只要一个CPU周期？（不是，要两个）
原因：在一个CPU周期内，dbus上只能传1个值
所以上述操作要拆分成两个CPU周期完成
123分配一个CPU周期，45分配一个CPU周期
所以：lad指令周期包含三个CPU周期
如果增加一路专门的地址总线，就可以减少一个CPU周期


第三条指令：add r1,r2  r1值+r2值--r2
第一个CPU周期：同上
第二个CPU周期：执行指令
1：选中r1和r2寄存器
2：alu做加法运算
3：alu结果送dbus
4：dbus送dr
5：dr（120）送r2寄存器
结束
上述操作需要一个CPU周期

第四条指令：sto r2,(r3) 将r2寄存器的值存放到数存，数存的地址在r3中
第一个CPU周期：同上
第二 个CPU周期：执行指令
1：选择r3寄存器（30）
2：r3（30）送dbus
3：dbus（30）打入ar寄存器，经abus（3）送数存
   数存地址译码，选中30号单元
4：选中r2寄存器（120）
5：r2（120）送dbus
6：dbus（120）送数存，存放在30号单元
结束
上述过程需要2个CPU周期
123安排一个CPU周期（送地址），456安排一个CPU周期（送数据）


第五条指令：jmp 101(跳转指令) 下一条指令跳到101单元执行

第一个cpu周期：同上
第二个CPU周期：
1：ir.地址码（101）送dbus
2：dbus（101）送pc寄存器（101）
结束

作业：参考上述分析，分析and r1，r3 指令的指令周期



用方框图表示指令周期

方框图的几个要素：
1：方框：表示一个cpu周期，在方框内填入控制信号
2：菱形：表示指令译码或测试
         所需时间依附于前一个方框（前一个cpu周期）

3：波浪线：表示公操作（一条指令执行完毕后，下一步的操作）
          典型的公操作如：取指令

例如：ADD指令的第二个CPU周期对应的方框
R1--ALU
R2--ALU
ALU(+)
ALU--DBUS
DBUS--DR
DR--R2

作业：画出课本P158图5.15方框图的STO指令的完整图。


第三节：时序产生器和控制方式
控制信号的生效有先后次序的要求
在控制信号上叠加时间信号，实现先后
如：一个cpu周期包含四个时钟周期（T周期）

第四节：微程序控制器
一：微程序控制原理
1：微命令和微操作
		
cpu内部部件分为控制部件和执行部件
两者之间的关系：控制部件发出命令给执行部件（称为微命令）
               执行部件收到命令，完成的操作（称为微操作）
看一个简单的模型：图5.21

例如：1：将数据打入到R1寄存器中（如1信号有效）
      5：如有效，控制R3的值经Y端送ALU
      +：如有效，控制ALU做加法

图5.21有：12个控制信号（微命令）
这12个控制信号有些：
是能在一个cpu周期内同时生效的：相容性微操作（如：1、2、3；6、5）
不能在一个cpu周期内同时生效的：相斥性微操作（如5、7、9；+、-、M）


2：微指令和微程序

微指令：将所有的微命令放在一起，加上顺序控制 构成了微指令

如：图5.22 微指令基本格式
其中的操作控制部分：由17个微命令组成
如：LDR1'：占1位（取值为0或1，当取1时，该信号有效）
           将数据打入 R1	寄存器
    R1-Y：占1位（取值为0或1，当取1时，该信号有效）
           R1的值经Y端送ALU

    PC+1：占1位（取值为0或1，当取1时，该信号有效）
           如为1，则PC寄存器值+1

预习：BCD加法算法

其中顺序控制部分：决定了下一条微指令在哪儿（在控存的位置）
一条指令的实现是由一个微程序实现的
微程序包含若干条微指令

例如：ADD R1,R2  (R1+R2--R1)(这是一条指令，如何实现？）

执行阶段第一条微指令：送操作数到ALU，+，存结果

10010010010000000 ******
如何保证先后次序：
4,7与T1
10与T3
1与T4

例题：实现一条BCD加法指令

BCD码：8421码
如：3:0011  7:0111  9:1001
   13:0001 0011   36:0011 0110
       1     3        3     6
两个BCD相加：3+4
0011
0100+
0111 正确，不要修正

5+8
0101
1000+
1101错误，要修正     
0110+=1 0011=0001 0011


规律：当两个数相加，和小于等于9，结果正确，不用修正
                    大于9，结果错误，要修正（+6）


基于上述规律，给出BCD加法指令的算法：（假设两个BCD数存在R1和R2寄存器中，6放在R3中）

1：R1+R2--R2  （结果可能是错误的）
2：R2+R3--R2   （不管结果是否正确，都+6修正）

3：如果不用修正，需要把原来的+6，再-6
   如果要修正，原来+6就是正确的，不需要-6
   如果+6后 产生了进位，说明是需要+6的，不用-6
   如果+6后 未产生进位，说明不要+6的，要-6  R2-R3--R2


0011
0100+
0111 正确的，不用修正
0110+
1101  未向高位产生进位


0110
1000+
1110 错误的，要修正
0110+=1 0100=0001 0100 向高位产生了进位
              1    4

所以，上述BCD加法指令的执行过程需要三个cpu周期，也就是说需要三条微指令;取指令要一个cpu周期
（注意：一个cpu周期对应一条微指令）

第一条微指令：取指令微指令  放在控存的0000单元

00000000000000101  10 0000

第二条微指令：R1+R2--R2 必须放在控存的1010单元

01010010010000000  00 1001

第三条微指令：R2+R3--R2 必须放在控存的1001单元
01000100110000000  01 0000

第四条微指令：R2-R3--R2  必须放在0001单元

01000100100100000  00 0000


第18、19位是测试位，根据某种条件决定第20-23位的值，称为P1、P2测试
我们决定：第18位测试条件为：如该位为1，则用指令操作码作为下一条微指令的地址（20-23位失效）
我们决定：BCD加法指令的操作码为1010
我们决定：第19位测试条件为：如该位为1，则用进位Cy的值取反修改第23位
取指令cpu周期结束后 必定开始执行 执行阶段的第一条微指令
如18、19位都为0（不用测试），则用20--23位作为下一条微指令的地址

通过上述例题发现，一条指令功能的实现（比如BCD加功能的实现）是通过一个微程序的执行实现的
                这个微程序有4条微指令（对应4个CPU周期）


控制存储器（控存）：是cpu内部的一个只读存储器，专门用来存放cpu指令集中所有指令对应的微程序。


图5.24：包含
控制存储器：用于存放微指令
微命令寄存器：用于存放控制字段（控制信号）、P字段（测试字段）
微地址寄存器：用于存放微指令的微地址部分（20--23位），决定了下一条微指令
             在控存中的位置
地址转移逻辑：用来修改微地址寄存器中的微地址（修改20--23位的值）
            它受：操作码影响
                 P字段影响
                  状态条件影响



图5.27：机器指令和微指令的关系

作业：设计一条AAA 指令的微程序
      AAA R1+R2-R3--R1
      假定：控存是空的
      决定：AAA的操作码为0011
            取指令微指令放在控存的0000单元（同例题）

二：微程序设计技术
1：微命令编码

直接表示法：一位代表一个微命令（取值0或1）
编码表示法：目的是减小微指令的长度
           对一组相斥性的微命令进行编码（n位编码实现2的n次方个微命令）

混合表示：

2：微地址的形成方法
计数器方式：直接用顺序控制部分作为下一条微指令的微地址
           且可以通过给一个增量，实现下一条的微地址
多路转移方式：微指令中设置测试字段，一个测试位对应一种跳转（转移）


3：微指令格式

水平型微指令：一次能定义执行多个微命令的微指令

垂直型微指令：一条微指令实现较少（1-2个）微命令



第六节：流水CPU
一：并行处理技术（提高cpu执行速度）
并行性的两个含义：
同时性：多个操作安排在同一时刻执行
并发性：多个操作在同一时间间隔内执行

时间并行：轮流使用硬件
空间并行：增加硬件数量
时间+空间并行：

二：流水cpu的结构
1、cpu执行指令过程分为：指令部件、指令队列、执行部件

上述3个功能部件构成一个3级流水线

2、流水cpu的时空图：分析流水线性能的提高程度

为方便分析：将指令的执行过程分为几个过程

取指令、指令译码和取操作数、执行指令、结果写回

非流水线时空图： 一条指令开始执行必须等上一条指令执行完毕
                8T执行两条指令
标量流水线时空图：指令各个阶段可以并发执行
                8T执行5条指令
超标量流水线时空图：以增加硬件为代价
                8T执行10条指令


3：流水线的分类：一种操作可以分为若干步骤，就可以用流水线实现
指令流水线：取指令、指令译码和取操作数、执行指令、结果写回 
算术流水线：运算步骤的并行（如加法运算：送操作数到alu、alu+、送出结果） 
处理机流水线：增加处理机的数量，把一个任务（程序）分为若干
             步骤


三：流水线中的主要问题（冲突、相关）

1：资源相关（冲突）
指令流水线过程中，多条指令要使用同一资源，可能会产生资源相关

为方便分析：将指令的执行过程分为 
        取指令、指令译码、计算有效地址或执行、访存取数并执行、结果写回
        表5.2：第四个时钟周期 I1在访问内存取数  I4在访问内存取指令，在资源（内存）上冲突
解决办法：延时、增加资源


2：数据相关
后一条指令的执行要等前一条指令的结果，流水线会导致前一条的结果还没写回，后一条指令已经要使用

表5.3：ADD在第五个时钟周期写回结果（R1)
       SUB在第四个时钟周期使用R1的值

解决办法：延时、在cpu的运算器中设置若干运算结果缓冲寄存器
               可以提前得到运算结果


3：控制相关
执行到跳转指令时会产生控制相关
解决办法：先执行流水线中的指令，再构造跳转后的新的流水线
         两种可能：一种先执行的指令和跳转后的指令没有关联
                  一种先执行的指令改变了跳转后指令的执行，要恢复
         转移预测法：根据某种指令过去行为预测将来的行为



第六章 总线
第一节：总线的概念和结构
一：概念
连接各部件，传递信号的设备称为总线，分为三类：
1：cpu内部的连接各寄存器和运算部件的总线：内部总线
2：连接cpu和其它高速设备的总线：系统总线
3：连接中低速设备的总线：I/O总线

总线的特性：
电气特性、物理特性、功能特性、时间特性

总线的标准化：不同厂家生产的不同设备可以互联（通过总线），因为遵循了相同的总线标准

衡量总线性能的指标：总线带宽（单位时间内数据的吞吐量），受总线宽度和工作频率影响

二：总线的连接方式
1：单总线结构：所有设备通过一路总线连接

特点：cpu发出地址给内存或外部设备
     外设也可以发出内存地址，从而外设可以和内存交换数据

缺点：高低速设备连在一起，降低数据的吞吐量

2：多总线结构

把高速和低速设备分开连接，之间通过桥电路连接

桥电路：具有缓冲、转换、控制等功能

第二节：总线接口
一：信息的传送方式
1：串行传送：只有一条传输线，每次传送一位
            用脉冲信号表示0或1
2：并行传送：每个数据位都需要一根单独的传输线，每次传送n位信息
            用高低电位表示1或0

二：总线接口的基本概念

I/O接口又叫适配器

接口的作用：
控制、缓冲、状态、转换、整理、程序中断

第三节：总线的仲裁
仲裁：多个设备提出总线使用请求，决定将总线的使用权分配给哪个设备？
通常采用：优先级或公平策略 分配总线使用权

一：集中式仲裁：有总线仲裁器
1：链式查询方式
原理：设备要使用总线，向仲裁器发出总线请求信号 BR   
      仲裁器接收到BR，且当前总线空闲，发出总线授权信号BG
     某设备接收到BG信号，开始使用总线，把总线状态设置为忙状态 BS=1
特点：有优先级，排在链路前的设备的优先级高
缺点：低优先级设备可能长时间得不到总线使用权、链路的故障敏感（断路）


2：计数器查询方式
原理：每个设备有自己的编号（设备号），仲裁器中有计数器
    有设备使用总线发出BR，总线闲，仲裁器检查计数器的值，
    将BG发给对应编号的设备，如该设备发出BR则使用总线
     如该设备未发出请求，计数器+1（循环加）
特点：既可以优先级 ：如每次从0开始计数
     也可以公平策略：从上次留下来的值开始计数

3：独立请求方式 
前两种方式的判断耗时较长
每个设备都有独立的一组BR、BG
仲裁器内有一个队列，优先相应排在队列前面的设备的总线请求
特点：有优先级，但是队列可编程（通过程序修改）


二：分布式仲裁：没有专门的仲裁器

原理：每个设备有编号
      有设备提出总线请求，拿仲裁总线上的编号和自己的编号比较
      如果自己的编号小于仲裁线上的编号，则撤销总线请求
      如果自己的编号大，则将自己的编号发到仲裁线上，获得总线使用权
     

作业：画出链式查询方式的电路图（门电路实现）


cpu和外设之间的几种常用方式介绍：
程序查询方式：
cpu主要任务是处理程序，在处理程序过程中会有外设发出处理请求，cpu要响应
cpu每隔一段时间（一个周期）停下正在处理的程序，转而取检查外设的状态是否有处理请求
                                            如有请求，转为处理外设请求
                                            如没有，cpu正常执行程序
上述过程是循环的
缺点：cpu要频繁的检查外设状态



中断查询方式：

cpu处理程序，不用检查外设的状态。当有外设提出处理请求时，向cpu发出中断请求
CPU接收到中断请求：将当前指令执行完毕、保存当前程序的执行状态
                  转而响应外设的中断处理请求
                  响应结束后恢复之前程序的执行状态，继续执行
自己看到单级中断。



上述两种方式的主控者都是cpu
DMA方式：直接内存数据传输方式
针对外设和内存之间的数据传输问题，增加一个DMA控制器，由它来负责外设和内存的数据传输。




































